package fullstack2.langex;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target({ElementType.ANNOTATION_TYPE})
//아래처럼 @을 interface 키워드 앞에 붙이면 바로 선언되어지고, 컴파일되어집니다.
public @interface MyAnnotation {
	//모든 어노테이션은 속성을 가질수 있고, 값 또한 지정 or 지정 하지않을 수 있습니다.
	//만약 지정을 할 경우엔 default 라는 키워드를 통해서 기본값을 지정할 수 있습니다.
	//만약 지정을 하지 않을 경우엔 이 어노테이션을 사용하는 코드에서 값을 지정해서 사용해야
	//합니다. 즉 속성 선언을 했을 경우를 말합니다.
	//속성 선언방법은 일반 인터페이스와는 조금 틀립니다. 아래는 문법..
	//타입 속성명() --> 이렇게 해야 합니다.
	//값을 초기화 할때는 타입 속성명() default 값.
	
	String myprop1();//myprop1 이라는 속성을 선언하겁니다.
	//위처럼 속성이 선언된 어노테이션을 가져다 쓰는 클래스는 반드시 속성값을 줘야 합니다!!!!
	//ex>@MyAnnotation(myprop1="value");
	
	//아래는 속성을 선언과 동시에 기본값을 주는 문법입니다.
	int myprop2() default 3;//3이라는 기본값을 초기화한 myprop2 속성 선언함.
	//위처럼 기본값이 있는경우엔, 사용하는 코드에서는 값을 주지않아도됩니다.
	//ex>@MyAnnotaion(prop1 = "노재현") OK
	//ex>@MyAnnotaion(prop1 = "노재현", prop2=100) OK ..기본값을 무시하고 100을줌
	
	
	/*
	 * 기본속성을 기술 할 수도있습니다. 기본 속성이란, 사용하는 코드에서 속성명을
	 * 주지않고 값을 바로 대입하게끔 하는 속성을 뜻합니다.
	 * 문법은 다음과 같음 : String value(); --> value() 자체가 기본 속성이라는 문법입니다.
	 * 이렇게된 경우 사용코드는 다음처럼 속성명을 생략하고 값만 대입할 수 있습니다.
	 * ex>@MyAnnotaion("안녕");
	 * 
	 * 만약 위, myprop1,2,value() 가 모두 혼합되었을 경우엔 어떻게 될까요?
	 * 답은 다음과 같음 : @MyAnnotation(value="hello",prop1="world")
	 * 
	 * 
	 * 
	 * 
	 * 어노테이션을 어디에 적용할지를 결정하는 속성을 알아볼게요.
	 * 위 뜻은 내가 정의한 어노테이션이 클래스에 적용할건, 메서드인지, 필드인지
	 * 생성자인지, 로컬변수인지, 패키지인지를 결정하겠다는 의미 입니다.
	 * 만약 내가 클래스 레벨에 적용되는 어노테이션을 선언하면,
	 * 이걸 가져다 쓰는 클래스에서 클래스 선언부에 어노테이션을 선언 해야만 합니다.
	 * 그렇지않고 생성자나 메서드에 선언하면, 바로 컴파일에러를 유발 합니다.
	 * 
	 * 이렇게 적용범위를 나타내는 값은 열거상수(enum) 으로 각각 정의 되어있어서,
	 * enum.범위명을 선언하면 됩니다.
	 * enum 이름은 ElementType 이라는 넘입니다.
	 * 
	 * 
	 * 
	 * 어노테이션의 유지 범위 설정 : 이 뜻은 어노테이션을 사용하는 코드에서
	 * 사용되는 @ 이 어떤 범위까지 유지될지를 결정한다는 의미 입니다.
	 * 범위종류는 SOURCE(컴파일시에만 유지,컴파일 후 삭제), 
	 * COMPILE(클래스가 메모리에 로딩 후 삭제됨), 
	 * RUNTIME(실행시까지 계속 유지됨) 이 있으며
	 * @Retention 어노테이션을 이용해서 범위를 지정합니다.
	 * @Retention 또한 이 범위를 지정한 @ 이기에 그 값(value)를 
	 * 정의 했습니다, 따라서 우리가 정의할때는 그 속성의 값으로
	 * RetentionPolicy 라는 enum 을 이용해서 범위를 지정할 수 있습니다.  
	 */
	
	
	
	
	
	
	
	
	
	
	
	
	

}
