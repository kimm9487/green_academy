package fullstack.loopex;

public class PrintFormatEx {

	public static void main(String[] args) {
		/*	
		 * 자바 출력문중 printf => format 출력메서드라고 합니다
		 * jdk 1.5 부터 지원되는 메서드로 System 클래스의 메서드입니다.
		 * println(), print() 는 파라미터로 주어지는 모든 타입의 내용을
		 * 문자열로 만들어서 콘솔에 출력하도록 되어있는데, 하나 이상의 타입의 값을
		 * 다양한 형태로 출력하기에는 부족함이 있어서, 지원하게 되어진 메서드입니다.
		 * 
		 * 일단 c, c++ 에서는 printf 가 기본 출력문이라서, 해당 언어를 좀 했던 사람은 쉽게 느껴질 것입니다.
		 * 아래는 형식(문법)입니다.
		 * 
		 * printf("format(형식) 문자열", 값1, 값2, 값n...~)
		 * 
		 * 위 형식 문자열에 아래처럼 4개의 구성으로 되어 있습니다.(모두 생략 가능하고 만약 생력을 하지 않으면 반드시 해당 format에
		 * 대응하는 값이 있어야합니다.)
		 * 
		 * 1. 값의 순번 지정
		 * 2. 공백 여부의 결정 (-,0)
		 * 3. 출력 될 전체 자리수 결정(만약 소수점이 출력되어진다면, 소숫점 포함 총 자릿수 입니다.)
		 * ex> 10.3f 라는 포멧을 주면, 총 10자리의 자릿수를 확보하는데, 이때, 소숫점도
		 * 자릿수에 포함, 그리고 소숫점 이하 자릿수는 4번째 자리서 반올림 후 3자리 까지 출력)
		 * 4. 소숫점을 출력시에 결정될 소숫점 이하 자릿수(ex .2 를 주면 소숫점 2자리까지 출력하되, 3자리에서 반올림 되어집니다)
		 * 
		 * 자.. 그럼 이젠 포맷 문자열에 대해 알아볼게요.
		 * 포멧 문자열이란 특정 기호가 사용되면 그 기호값을 기준으로 값을 가진 변숴의 출력을 결정하는 문자열을 뜻합니다.
		 * 
		 * 모든 포맷의 문자열은 "%"로 시작해야합니다.
		 * 1. 정수(digit) : d (정수를 표현하라는 의미)
		 * ex>
		 * %d : 정수 표현 --> 123
		 * %6d : 6자리 정수로 표현하되, 남는 자리는 공백으로 채워라는 의미
		 * %-3d : 3자리로 정수 표현, 오른쪽 빈자리 채우라는 의미 ex>1공백
		 * %09d : 총 0자리 정수 표현하라는 의미, 남는 자리는 0으로 채움
		 * 
		 * 
		 * 
		 * 자릿수로 카운팅 됩니다.
		 * ex>%10.2f --> 총 10자리로 표현하되, 소숫점 이하는 2자리까지 표현
		 * 
		 */
		
		String name = "노재현";
		int age = 31;
		
		System.out.printf("이름은 = %s", name);
		System.out.printf("나이는 = %d", age);
		
		System.out.printf("이름 : %1$s, 나이 : %2$d", name, age);
		
		//이번에 출력 시 자릿수 표현에 대해 알아볼게요.
		
		int value = 789;
		System.out.println();
		System.out.printf("value 변수의 값 : %9d\n", value);
		
		double pi = Math.PI;
		//printf 를 이용한 실수 표현해봅니다.
		System.out.println(pi);
		
		System.out.printf("PI 값은 : %.3f",pi);//소숫점 3자리까지 출력, 4자리에서 반올림
		
		//소숫점 및 하나 이상의 변수를 printf 로 출력하는 예 입니다.
		double circle = pi * 5 * 5;// 반지름이 5인 원의 면적 구하기
		System.out.println();
		System.out.printf("반지름이 %d 인 원의 면적 : %.2f 입니다",5,circle);
		
		
		
		
		
		
		
		
		
		
		
	}


}
